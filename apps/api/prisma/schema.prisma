generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === 新增：订单状态枚举 ===
enum OrderStatus {
  pending
  paid
  making
  ready
  completed
  refunded
}

// ... 其他已有内容

model Order {
  id             String       @id @default(uuid())
  userId         String?      // <— 新增/确认存在
  channel        String
  fulfillmentType String
  status         OrderStatus  @default(pending)
  subtotalCents  Int
  taxCents       Int
  totalCents     Int
  pickupCode     String?
  createdAt      DateTime     @default(now())
  items          OrderItem[]

  @@index([createdAt])
}


model OrderItem {
  id             String  @id @default(uuid())
  orderId        String
  order          Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId      String
  qty            Int
  unitPriceCents Int?
  optionsJson    Json?
}

// === Loyalty Enums ===
enum LoyaltyEntryType {
  EARN_ON_PURCHASE
  ADJUST_MANUAL
  REDEEM
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

// === Loyalty Models ===
model LoyaltyAccount {
  id             String        @id @default(uuid())
  userId         String        @unique                      // 不强制外键，便于先行接入
  pointsMicro    BigInt        @default(0)                  // 以 1e-4 点为单位存储，避免小数
  tier           LoyaltyTier   @default(BRONZE)
  createdAt      DateTime      @default(now())
  ledger       LoyaltyLedger[]
}

model LoyaltyLedger {
  id                 String            @id @default(uuid())
  accountId          String
  account            LoyaltyAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  type               LoyaltyEntryType
  orderId            String?
  deltaMicro         BigInt            // 本次增加/减少的微点
  balanceAfterMicro  BigInt            // 记账后的余额
  note               String?
  createdAt          DateTime          @default(now())

  @@unique([orderId, type], name: "orderId_type")
}
