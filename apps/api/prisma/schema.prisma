// === Prisma 基础 ===
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Enums ===
enum OrderStatus {
  pending
  paid
  making
  ready
  completed
  refunded
}

enum FulfillmentType {
  pickup
  dine_in
}

enum Channel {
  web
  in_store
  ubereats
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum LoyaltyEntryType {
  EARN_ON_PURCHASE     // 支付后赚取
  REDEEM_ON_ORDER      // 下单时抵扣
  REFUND_REVERSE_EARN  // 退款时冲回赚取
  REFUND_RETURN_REDEEM // 退款时退回抵扣
}

// === Models ===
model Order {
  id              String          @id @default(uuid()) @db.Uuid
  userId          String?         @db.Uuid
  channel         Channel
  fulfillmentType FulfillmentType
  status          OrderStatus     @default(pending)
  subtotalCents   Int
  taxCents        Int
  totalCents      Int
  pickupCode      String?
  createdAt       DateTime        @default(now())

  items           OrderItem[]

  @@index([createdAt])
}

model OrderItem {
  id             String   @id @default(uuid()) @db.Uuid
  orderId        String   @db.Uuid
  productId      String
  qty            Int
  unitPriceCents Int?
  optionsJson    Json?

  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model LoyaltyAccount {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @unique
  pointsMicro BigInt        @db.BigInt
  tier        LoyaltyTier   @default(BRONZE)
  createdAt   DateTime      @default(now())

  ledger      LoyaltyLedger[]

  @@index([userId])
}

model LoyaltyLedger {
  id                String            @id @default(uuid()) @db.Uuid
  accountId         String            @db.Uuid
  orderId           String?           @db.Uuid
  type              LoyaltyEntryType
  deltaMicro        BigInt            @db.BigInt
  balanceAfterMicro BigInt            @db.BigInt
  note              String?
  createdAt         DateTime          @default(now())

  account           LoyaltyAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId, createdAt])
  @@unique([orderId, type])
}
